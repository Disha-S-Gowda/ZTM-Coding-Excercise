
        /* Two Sum
         
        Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target

        Input: nums = [2,7,11,15], target = 9
        Output: [0,1]
        Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

        Input: nums = [3,2,4], target = 6
        Output: [1,2]

        */

        public int[] twoSum(int[] nums, int target)
        {

            Dictionary<int, int> hash = new Dictionary<int, int>();

            for (int i = 0; i < nums.Length; i++)
            {

                int compliment = target - nums[i];
                if (hash.ContainsKey(compliment))
                {
                    return new int[] { hash[compliment], i };
                }
                else
                {
                    hash.Add(nums[i], i);
                }
            }

            return null;
        }

        /* Add Two Numbers

        You are given two non-empty linked lists representing two non-negative integers.
        The digits are stored in reverse order, and each of their nodes contains a single digit.
        Add the two numbers and return the sum as a linked list.

        Input: l1 = [2,4,3], l2 = [5,6,4]
        Output: [7,0,8]
        Explanation: 342 + 465 = 807.

        Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
        Output: [8,9,9,9,0,0,0,1]

        */

        ListNode top;
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        //add numbers from each list
        ListNode result = null;
      int sum = 0,carryOver = 0;
        
       while(l1 != null && l2 != null) {
           
           sum = l1.val + l2.val + carryOver;
           
           carryOver = sum / 10;
            sum = sum % 10;
           
            l1 = l1.next;
            l2 = l2.next;
           result = this.AddNode(result,sum);
           
       }
        while(l1 != null){
            sum = l1.val + carryOver;
            
            carryOver = sum / 10;
            sum = sum % 10;
            
            l1 = l1.next;
            result = this.AddNode(result,sum);
        }
        while(l2 != null){
            sum = l2.val + carryOver;
            
            carryOver = sum / 10;
            sum = sum % 10;            
            
            l2 = l2.next;
            result = this.AddNode(result,sum);
        }
        if(carryOver == 1){
            result = this.AddNode(result,carryOver);
        }
        return top;
    }
    
    public ListNode AddNode(ListNode node, int val){
        
        if(node != null){
            node.next = new ListNode(val,null);
            node = node.next;
        }
        else{
            node = new ListNode(val,null);
            top = node;
        }
        return node;
    }

    /* Longest Substring Without Repeating Characters

    Given a string s, find the length of the longest substring without repeating characters.

    Input: s = "abcabcbb"
    Output: 3
    Explanation: The answer is "abc", with the length of 3.

    Input: s = "bbbbb"
    Output: 1
    Explanation: The answer is "b", with the length of 1.
    */

    public int lengthOfLongestSubstring(String s) {
        Map<Character, Integer> hash = new HashMap<Character, Integer>();
        int MaxLength = 0,j = 0, i = 0;
        char[] chararray = s.toCharArray();
        
        //if(s.length() == 0){
        //    return 0;
        //}
        for(char symbol : chararray){
            
            if(hash.containsKey(symbol)){
                i = Math.max(hash.get(symbol),i);
            }
                int strlen = j - i +1;
                MaxLength = (MaxLength > strlen)? MaxLength: strlen;
                hash.put(symbol,j + 1);
            
            j++;
        }
        //MaxLength = (MaxLength == 0)? s.length() : MaxLength;
        return MaxLength;

    }

    /* Best Time to Buy and Sell Stock II

    You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
    On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. 
    However, you can buy it then immediately sell it on the same day.
    Find and return the maximum profit you can achieve.

    Input: prices = [7,1,5,3,6,4]
    Output: 7
    Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
    Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
    Total profit is 4 + 3 = 7.

    Input: prices = [1,2,3,4,5]
    Output: 4
    Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
    Total profit is 4.

    */

    public int MaxProfit(int[] prices) {
        
        int profit = 0;
        int cost_price = 0;
        bool stock_bit = false;
        int length = prices.Length - 1;
        
        for(int i = 0; i < length; i++){
            
            if(prices[i+1] > prices[i]){ //Buy when next price is greater
                if(!stock_bit){
                    stock_bit = true;
                    cost_price = prices[i];
                }                
            }
            else if(prices[i+1] < prices[i]){//sell when next price is lower
                if(stock_bit){
                    stock_bit = false;
                    profit += prices[i] - cost_price;
                }
            }             
              
        }
        
        if(stock_bit){
            stock_bit = false;
            profit += prices[length] - cost_price;
        }
        return profit;
        
    }

    /* Rotate Array

    Given an array, rotate the array to the right by k steps, where k is non-negative.

    Input: nums = [1,2,3,4,5,6,7], k = 3
    Output: [5,6,7,1,2,3,4]
    Explanation:
    rotate 1 steps to the right: [7,1,2,3,4,5,6]
    rotate 2 steps to the right: [6,7,1,2,3,4,5]
    rotate 3 steps to the right: [5,6,7,1,2,3,4]

    Input: nums = [-1,-100,3,99], k = 2
    Output: [3,99,-1,-100]
    Explanation: 
    rotate 1 steps to the right: [99,-1,-100,3]
    rotate 2 steps to the right: [3,99,-1,-100]

    */

    public void Rotate(int[] nums, int k) {
                       
        int length = nums.Length;
        
        while(k > length){
            k = k - length;
        }
        
        int[] buffer = new int[length];
        int i = 0;
        
        for(int j = length - k ;j < length; j++){
            buffer[i] = nums[j];
            i++;
        }
        
        for(i=length - k - 1 ; i >=0; i--){
            nums[i+ k] = nums[i];            
        }
        
        for(int j = 0 ;j < k; j++){
            nums[j] = buffer[j];           
        }
        
    }

    /* Contains Duplicate

    Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

    Input: nums = [1,2,3,1]
    Output: true

    Input: nums = [1,2,3,4]
    Output: false

    */

    public bool ContainsDuplicate(int[] nums) {
        
        HashSet<int> set = new HashSet<int>();
        
        foreach(int item in nums){
            set.Add(item);
        }
        
        if(set.Count < nums.Length){
            return true;
        }
        return false;
    }

    /* Single Number

    Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
    You must implement a solution with a linear runtime complexity and use only constant extra space.

    Input: nums = [2,2,1]
    Output: 1

    Input: nums = [4,1,2,1,2]
    Output: 4

    */

    public int SingleNumber(int[] nums) {
        
       int result = 0;
        
        foreach(int item in nums){
            
           result ^= item;
        }
            
        return result;        
        
    }

    /* Intersection of Two Arrays II

    Given two integer arrays nums1 and nums2, return an array of their intersection.
    Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.

    Input: nums1 = [1,2,2,1], nums2 = [2,2]
    Output: [2,2]

    Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
    Output: [4,9]
    Explanation: [9,4] is also accepted.

    */

    public int[] Intersect(int[] nums1, int[] nums2) {
        
        Dictionary<int,int> hash;
        List<int> result = new List<int>();
        
        Func<int[],Dictionary<int,int>> GetFreqs = a => a.GroupBy(x => x).ToDictionary(x => x.Key, x=> x.Count());
        
        hash = GetFreqs(nums1);
        
        foreach(int item in nums2){
            
            if(hash.ContainsKey(item)){
                hash[item]--;
                result.Add(item);   
                
                if(hash[item] == 0){
                    hash.Remove(item);
                }
            }
        }
        
        return result.ToArray();
        
    }

    /* Plus One

    You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer.
    The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
    Increment the large integer by one and return the resulting array of digits.

    Input: digits = [1,2,3]
    Output: [1,2,4]
    Explanation: The array represents the integer 123.
    Incrementing by one gives 123 + 1 = 124.
    Thus, the result should be [1,2,4].

    Input: digits = [4,3,2,1]
    Output: [4,3,2,2]
    Explanation: The array represents the integer 4321.
    Incrementing by one gives 4321 + 1 = 4322.
    Thus, the result should be [4,3,2,2].
    */

    public int[] PlusOne(int[] digits) {
        
        List<int> digi_list = new List<int>(digits);
        int carryBit = 1;
        
        for(int i = digi_list.Count - 1; i >= 0; i--){
            
            digi_list[i] += carryBit;
            int item = digi_list[i];
            
            if(item == 10){
                digi_list[i] = 0;
                carryBit = 1;
            }
            else{
                carryBit = 0;
                break;
            }
            
        }
        if(carryBit == 1){
            digi_list.Insert(0,1);
        }
                
        return digi_list.ToArray();
        
    }

    /* Move Zeroes

    Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.
    Note that you must do this in-place without making a copy of the array.

    Input: nums = [0,1,0,3,12]
    Output: [1,3,12,0,0]

    Input: nums = [0]
    Output: [0]

    */

    public void MoveZeroes(int[] nums) {
        int i = 0;
        
        for(int j = 1; j < nums.Length;j++){
                         
            if(nums[i] != 0){
                i++;
            }
            if(nums[i] == 0 && nums[j] != 0){
                nums[i] = nums[j];
                nums[j] = 0;
                i++;                    
            }
        }
    }

    /* 3Sum

    Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
    Notice that the solution set must not contain duplicate triplets.

    Input: nums = [-1,0,1,2,-1,-4]
    Output: [[-1,-1,2],[-1,0,1]]
    Explanation: 
    nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
    nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
    nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
    The distinct triplets are [-1,0,1] and [-1,-1,2].
    Notice that the order of the output and the order of the triplets does not matter.

    Input: nums = [0,1,1]
    Output: []
    Explanation: The only possible triplet does not sum up to 0.

    */

    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        
        for(int i=0;i+2<nums.length;i++){
            if(i>0 && nums[i]==nums[i-1]){
                continue;
            }
            int j=i+1;
            int k=nums.length-1;
            
            while(j<k){
                int temp = nums[i]+nums[j]+nums[k];
                if(temp==0){
                    List<Integer> t = new ArrayList<>();
                    t.add(nums[i]);
                    t.add(nums[j]);
                    t.add(nums[k]);
                    res.add(t);
                    k--;
                    while(j<k && nums[k]==nums[k+1]){
                        k--;
                    }
                    while(j<k && nums[j]==nums[j-1]){
                        j--;
                    }
                }
                else if(temp<0){
                    j++;
                }
                else{
                    k--;
                }
            }
        }
        
        return res;
    }

    /* Valid Sudoku

    Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

    Each row must contain the digits 1-9 without repetition.
    Each column must contain the digits 1-9 without repetition.
    Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
    Note:

    A Sudoku board (partially filled) could be valid but is not necessarily solvable.
    Only the filled cells need to be validated according to the mentioned rules.

    Input: board = 
    [["5","3",".",".","7",".",".",".","."]
    ,["6",".",".","1","9","5",".",".","."]
    ,[".","9","8",".",".",".",".","6","."]
    ,["8",".",".",".","6",".",".",".","3"]
    ,["4",".",".","8",".","3",".",".","1"]
    ,["7",".",".",".","2",".",".",".","6"]
    ,[".","6",".",".",".",".","2","8","."]
    ,[".",".",".","4","1","9",".",".","5"]
    ,[".",".",".",".","8",".",".","7","9"]]
    Output: true

    Input: board = 
    [["8","3",".",".","7",".",".",".","."]
    ,["6",".",".","1","9","5",".",".","."]
    ,[".","9","8",".",".",".",".","6","."]
    ,["8",".",".",".","6",".",".",".","3"]
    ,["4",".",".","8",".","3",".",".","1"]
    ,["7",".",".",".","2",".",".",".","6"]
    ,[".","6",".",".",".",".","2","8","."]
    ,[".",".",".","4","1","9",".",".","5"]
    ,[".",".",".",".","8",".",".","7","9"]]
    Output: false
    Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.

    */

    public bool IsValidSudoku(char[][] board) {
    
        var seenDigits = new bool[10];
        
        // check rows        
        for(int i = 0; i < 9; ++i){
            for(int j = 0; j < 9; ++j){
                
                var digitChar = board[i][j];
                if(digitChar == '.'){
                    continue;
                }
                
                var digit = digitChar - '0';
                
                if(seenDigits[digit]){
                    return false;
                }
                
                seenDigits[digit] = true;
            }
            
            Array.Clear(seenDigits, 0, seenDigits.Length);
        }
        
        // check columns
        for(int j = 0; j < 9; ++j){
            for(int i = 0; i < 9; ++i){
                
                var digitChar = board[i][j];
                if(digitChar == '.'){
                    continue;
                }
                
                var digit = digitChar - '0';
                
                if(seenDigits[digit]){
                    return false;
                }
                
                seenDigits[digit] = true;
            }
            
            Array.Clear(seenDigits, 0, seenDigits.Length);
        }
        
        // check blocks
        
        for(int iBlock = 0; iBlock < 3; ++iBlock){
            for(int jBlock = 0; jBlock < 3; ++jBlock){
                
                for(int i = 0; i < 3; ++i){
                    for (int j = 0; j < 3; ++j){
                        var digitChar = board[iBlock * 3 + i][jBlock * 3 + j];
                        if(digitChar == '.'){
                            continue;
                        }

                        var digit = digitChar - '0';

                        if(seenDigits[digit]){
                            return false;
                        }

                        seenDigits[digit] = true;
                    }
                }
                                                
                Array.Clear(seenDigits, 0, seenDigits.Length);
            }
        }
        
        return true;
    }

    /* Group Anagrams

    Given an array of strings strs, group the anagrams together. You can return the answer in any order.
    An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

    Input: strs = ["eat","tea","tan","ate","nat","bat"]
    Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

    Input: strs = [""]
    Output: [[""]]

    */

    public IList<IList<string>> GroupAnagrams(string[] strs) {
        
        //2 approaches.
        
        //First Approach
        //Sort each of the string in alpha numeric order and us it as a key in hash map. store original string as value.
        //this way all the anagrams will have same key.
        
        //2nd approach benificial only if the string length is greater than 26. likely have repetative elements.
        //store each string as a 26 element frequesncy vector.
        //consider that vector as key and and store original string as value.
        //storing frequency matrix fremoves overhead of sorting each string which has overhead of mlogm where m is length of each string.
        
        
        Dictionary<string, IList<string>> hash = new Dictionary<string, IList<string>>();
        
        foreach(string word in strs){
            
            char[] str_char = word.ToCharArray(); //Array.Sort();
            Array.Sort(str_char);
            string sorted_str = String.Join("",str_char); 
            
            if(!hash.ContainsKey(sorted_str)){
                
                var temp = new List<string>(){word};
                
                hash.Add(sorted_str, temp);
                
            }
            else{
                
                hash[sorted_str].Add(word);
            }
            
            
        }
        
        return hash.Values.ToList();        
    }

    /* Longest Substring Without Repeating Characters

    Given a string s, find the length of the longest substring without repeating characters.
    Input: s = "abcabcbb"
    Output: 3
    Explanation: The answer is "abc", with the length of 3.

    Input: s = "bbbbb"
    Output: 1
    Explanation: The answer is "b", with the length of 1.

    */

     public int LengthOfLongestSubstring(string s) {
        
        Dictionary<char, int> hash = new Dictionary<char, int>();
        
        int substr_start = 0;
        int substr_len = 0;
        char[] str = s.ToCharArray();
        
        int Max_strlen = 0;
        
        for(int i = 0; i< str.Length; i++){
            
            char ele = str[i];
            
            if(hash.ContainsKey(ele)){                
                
                if(substr_len > Max_strlen){
                    Max_strlen = substr_len;
                }
                
                if(substr_start <= hash[ele]){
                    substr_start = hash[ele] + 1;                
                    substr_len = i - hash[ele];
                }
                else{
                    substr_len++;
                }              
                
                hash[ele] = i;
                
            }
            else{
                hash.Add(ele,i);
                substr_len++;
                
            }
        }
        if(substr_len > Max_strlen){
            Max_strlen = substr_len;
        }
        return Max_strlen;
    }

    /* Remove Nth Node From End of List
    Given the head of a linked list, remove the nth node from the end of the list and return its head.

    Input: head = [1,2,3,4,5], n = 2
    Output: [1,2,3,5]

    Input: head = [1], n = 1
    Output: []

    */

    public ListNode RemoveNthFromEnd(ListNode head, int n) {
        
        ListNode fastPointer = head;
        ListNode slowPointer = head;
        int counter = 0;
                
        while(fastPointer.next != null){
            fastPointer = fastPointer.next;
            if(counter >= n){
                slowPointer = slowPointer.next;
            }
            counter++;
        }
        
        if(slowPointer == head & counter < n){
            head = head.next;
        }
        else{
            slowPointer.next = slowPointer.next.next;
        }
        
        return head;
    }

    /* Reverse Linked List

    Given the head of a singly linked list, reverse the list, and return the reversed list.

    Input: head = [1,2,3,4,5]
    Output: [5,4,3,2,1]

    Input: head = [1,2]
    Output: [2,1]

    */

    public ListNode ReverseList(ListNode head) {
        
        if(head == null) return head;
        
        ListNode currentNode = head.next;
        ListNode prevNode = head;
        prevNode.next = null;
        
        while(currentNode != null){
            
            ListNode temp = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = temp;
            
        }
        
        head = prevNode;
        return head;
    }

    /* Odd Even Linked List

    Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.
    The first node is considered odd, and the second node is even, and so on.
    Note that the relative order inside both the even and odd groups should remain as it was in the input.
    You must solve the problem in O(1) extra space complexity and O(n) time complexity.

    Input: head = [1,2,3,4,5]
    Output: [1,3,5,2,4]

    Input: head = [2,1,3,5,6,4,7]
    Output: [2,3,6,7,1,5,4]

    */

    public ListNode OddEvenList(ListNode head) {
        
        if(head == null) return null;
        
        ListNode even_head = head.next;
        ListNode odd_list = head;
        ListNode even_list = even_head;
        
        while(even_list != null && even_list.next != null){            
            
                odd_list.next = even_list.next;
                odd_list = odd_list.next;
                even_list.next = odd_list.next;
                even_list = even_list.next;           
                       
        }
        odd_list.next = even_head;
        
        return head;
    }

    /* Intersection of Two Linked Lists

    Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect.
    If the two linked lists have no intersection at all, return null.

    Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
    Output: Intersected at '8'

    Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
    Output: No intersection

    */

     public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {
        
         // Maintaining two pointers ptr1 and ptr2
        // at the head of A and B,
        ListNode ptr1 = headA;
        ListNode ptr2 = headB;
 
        // If any one of head is null i.e
        // no Intersection Point
        if (ptr1 == null || ptr2 == null) {
 
            return null;
        }
 
        // Traverse through the lists until they
        // reach Intersection node
        while (ptr1 != ptr2) {
 
            Console.WriteLine(" pointer1 value "+ ptr1.val+ " pointer 2 value "+ ptr2.val);
            
            ptr1 = ptr1.next;
            ptr2 = ptr2.next;
 
            //Console.WriteLine(" pointer1 value "+ ptr1.val+ " pointer 2 value "+ ptr2.val);
            
            // If at any node ptr1 meets ptr2, then it is
            // intersection node.Return intersection node.
 
            if (ptr1 == ptr2) {
 
                return ptr1;
            }
            /*
             * Once both of them go through reassigning, they will be equidistant from the
             * collision point.
             */
 
            // When ptr1 reaches the end of a list, then
            // reassign it to the head2.
            if (ptr1 == null) {
 
                ptr1 = headB;
            }
            // When ptr2 reaches the end of a list, then
            // redirect it to the head1.
            if (ptr2 == null) {
 
                ptr2 = headA;
            }
        }
 
        return ptr1;
    }

    /* Binary Tree Inorder Traversal
    Given the root of a binary tree, return the inorder traversal of its nodes' values.

    Input: root = [1,null,2,3]
    Output: [1,3,2]

    Input: root = []
    Output: []
    */

    List<int> output;
    public IList<int> InorderTraversal(TreeNode root) {
     
        output = new List<int>();
        if(root == null){
            return output;
        }
        
        traverse(root);
        
        return output;        
    }
    
    public void traverse(TreeNode root){
        
        
        if(root.left == null && root.right == null){
            output.Add(root.val);
            return;
        }
        else{
            if(root.left != null){
                traverse(root.left);
            }
            output.Add(root.val);
            if(root.right != null){
                traverse(root.right);
            }
        }
        
    }

    /* Zigzag Conversion

    The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this:
    P   A   H   N
    A P L S I I G
    Y   I   R
    And then read line by line: "PAHNAPLSIIGYIR"
    Write the code that will take a string and make this conversion given a number of rows:

    Input: s = "PAYPALISHIRING", numRows = 3
    Output: "PAHNAPLSIIGYIR"

    Input: s = "PAYPALISHIRING", numRows = 4
    Output: "PINALSIGYAHRPI"
    */

    public string Convert(string s, int numRows) {
        
        if(numRows == 1){
            return s;
        }
        string Output = "";
        for(int i=1; i <= numRows; i++){
            int endDist = numRows-i;
            int startDist = i-1;
            
            int j = i - 1;
            bool toggle = true;
            while(j< s.Length){
                
                    Output += s[j];

                    if (toggle && endDist != 0)
                    {
                        j += 2 * endDist;                        
                    }
                    else if (startDist != 0)
                    {
                        j += 2 * startDist;
                    }
                    else
                    {
                        j += 2 * endDist;
                    }

                    toggle = !toggle;            
            }
        }
        
        return Output;
    }

    /* Maximum Number of Pairs in Array

    You are given a 0-indexed integer array nums. In one operation, you may do the following:
    Choose two integers in nums that are equal.
    Remove both integers from nums, forming a pair.

    Input: nums = [1,3,2,1,3,2,2]
    Output: [3,1]
    Explanation:
    Form a pair with nums[0] and nums[3] and remove them from nums. Now, nums = [3,2,3,2,2].
    Form a pair with nums[0] and nums[2] and remove them from nums. Now, nums = [2,2,2].
    Form a pair with nums[0] and nums[1] and remove them from nums. Now, nums = [2].
    No more pairs can be formed. A total of 3 pairs have been formed, and there is 1 number leftover in nums.

    Input: nums = [0]
    Output: [0,1]

    */

     public int[] NumberOfPairs(int[] nums) {
                
        int[] freq = new int[101];
        int pairCount = 0;
        Array.Fill(freq,0);
        
        foreach(int num in nums){
            if(freq[num] > 0){
                freq[num]--;
                pairCount++;
            }
            else{
                freq[num]++;
            }
        }
        int indivisualCount = freq.Sum();
        return new int[2]{pairCount,indivisualCount};
        
    }

    /* Maximum Product Difference Between Two Pairs

    The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).
For example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.
Given an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.
Return the maximum such product difference.

Input: nums = [5,6,2,7,4]
Output: 34
Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).
The product difference is (6 * 7) - (2 * 4) = 34.

Input: nums = [4,2,5,9,7,4,8]
Output: 64

    */

     public int MaxProductDifference(int[] nums) {
        
        //sort the list
        //take product diirece of last two and first two element as pair      
        
        //or 
            
        //find first min second min
        // find first max and second max
        //find the diff
                  
        int max1 = Int32.MinValue;
        int max2 = max1;
        int min1 = Int32.MaxValue;
        int min2 = min1;

        for (int i = 0; i < nums.Length; i++) {
            if (max1 < nums[i]) {
                max2 = max1;
                max1 = nums[i];
            }
            else if (nums[i] > max2)
                max2 = nums[i];

            if (min1 > nums[i]) {
                min2 = min1;
                min1 = nums[i];
            }
            else if (nums[i] < min2)
                min2 = nums[i];
            }
        
        return (max1 * max2) - (min1 * min2);   
    }